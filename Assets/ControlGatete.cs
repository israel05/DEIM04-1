//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/ControlGatete.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlGatete: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlGatete()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlGatete"",
    ""maps"": [
        {
            ""name"": ""JugadorGatete"",
            ""id"": ""7df758a0-e058-465d-a710-763cd5d53887"",
            ""actions"": [
                {
                    ""name"": ""Moverse"",
                    ""type"": ""Value"",
                    ""id"": ""74c3abcc-9295-4f7c-b191-6a476ed00b98"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Usar"",
                    ""type"": ""Button"",
                    ""id"": ""86ef2bc3-f353-4660-8e39-4d57e4b9f768"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f138f57-2313-4b2d-a691-c39ba04fdbff"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ac8a941b-2111-4092-b3a6-ac545c3120fe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moverse"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""98d6e329-b389-4594-8351-944e1a9f146c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""b0beece8-19ef-4b9b-8a13-4a0dfd571402"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""a54b8b67-2ed5-49b1-bd60-14022f3b7d61"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""fe996b55-36df-4f59-8bc6-810772b88bd8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""613c5086-3085-4113-a86a-8a3952e7b8e8"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Usar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f80587d-8557-4aef-bc08-4befe2c2e535"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Usar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // JugadorGatete
        m_JugadorGatete = asset.FindActionMap("JugadorGatete", throwIfNotFound: true);
        m_JugadorGatete_Moverse = m_JugadorGatete.FindAction("Moverse", throwIfNotFound: true);
        m_JugadorGatete_Usar = m_JugadorGatete.FindAction("Usar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // JugadorGatete
    private readonly InputActionMap m_JugadorGatete;
    private List<IJugadorGateteActions> m_JugadorGateteActionsCallbackInterfaces = new List<IJugadorGateteActions>();
    private readonly InputAction m_JugadorGatete_Moverse;
    private readonly InputAction m_JugadorGatete_Usar;
    public struct JugadorGateteActions
    {
        private @ControlGatete m_Wrapper;
        public JugadorGateteActions(@ControlGatete wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moverse => m_Wrapper.m_JugadorGatete_Moverse;
        public InputAction @Usar => m_Wrapper.m_JugadorGatete_Usar;
        public InputActionMap Get() { return m_Wrapper.m_JugadorGatete; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JugadorGateteActions set) { return set.Get(); }
        public void AddCallbacks(IJugadorGateteActions instance)
        {
            if (instance == null || m_Wrapper.m_JugadorGateteActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JugadorGateteActionsCallbackInterfaces.Add(instance);
            @Moverse.started += instance.OnMoverse;
            @Moverse.performed += instance.OnMoverse;
            @Moverse.canceled += instance.OnMoverse;
            @Usar.started += instance.OnUsar;
            @Usar.performed += instance.OnUsar;
            @Usar.canceled += instance.OnUsar;
        }

        private void UnregisterCallbacks(IJugadorGateteActions instance)
        {
            @Moverse.started -= instance.OnMoverse;
            @Moverse.performed -= instance.OnMoverse;
            @Moverse.canceled -= instance.OnMoverse;
            @Usar.started -= instance.OnUsar;
            @Usar.performed -= instance.OnUsar;
            @Usar.canceled -= instance.OnUsar;
        }

        public void RemoveCallbacks(IJugadorGateteActions instance)
        {
            if (m_Wrapper.m_JugadorGateteActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJugadorGateteActions instance)
        {
            foreach (var item in m_Wrapper.m_JugadorGateteActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JugadorGateteActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JugadorGateteActions @JugadorGatete => new JugadorGateteActions(this);
    public interface IJugadorGateteActions
    {
        void OnMoverse(InputAction.CallbackContext context);
        void OnUsar(InputAction.CallbackContext context);
    }
}
